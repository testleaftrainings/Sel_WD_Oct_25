Agenda
week3.day4:
-> Collections (List)
-> Break
-> Breakout 
-> Set
-> Breakout

List Interface in Java:

Here are some key characteristics and methods associated with the List interface:

Ordered Collection:

Lists maintain the order in which elements are inserted. The order of elements in a list is determined by the sequence in which they were added.
Duplicates Allowed:

Unlike a Set, a List allows duplicate elements. Each element in the list has a unique index, starting from 0.
Dynamic Size:

Lists can dynamically grow or shrink in size as elements are added or removed. The size of a list is not fixed.
Common List Implementations:

ArrayList: Implements a dynamic array that can grow or shrink in size. Provides fast random access and is suitable for scenarios where elements are frequently accessed.
LinkedList: Implements a doubly-linked list. Provides efficient insertion and deletion of elements at any position in the list.
wrapper class : specifically designed to wrap primitive data types EX: dataType - weapper class int -Integer double -Double

Common Methods:
add: Adds an element to the list.
get: Retrieves the element at a specified index.
remove: Removes an element from the list.
size: Returns the number of elements in the list.
contains: Checks if a specific element is present in the list


Definition: The List interface in Java is part of the Java Collections Framework. It represents an ordered collection (also known as a sequence). Lists can contain duplicate elements and are dynamic in size, meaning they can grow or shrink as needed. Why Use Lists: Lists are used when you need an ordered collection that can change in size. This is particularly useful when you don't know the number of elements in advance, or when you need to perform frequent insertions and deletions. ArrayList vs LinkedList: While ArrayList is the most common implementation, providing fast access and efficient storage for large numbers of elements, LinkedList can be more efficient for certain use cases, especially where frequent insertion and deletion occur. Methods and Use Cases Creating Lists (new ArrayList<>()):
* Usage: To initialize a list. Real-time Use Case: In a real-world scenario, you might initialize a list to store data such as employee names, product details, or any collection of similar items. For example, a list to store the names of participants in a workshop. Adding Items (add() method):
* Usage: To add elements to the list. Real-time Use Case: This is used when you need to add new data to your collection. For example, adding new members to a project team or new items to a to-do list. Inserting at Specific Index (add(index, element)):
* Usage: To add an element at a specified position in the list. Real-time Use Case: Useful in cases where the order is important, like adding a new task at a specific position in a task list or inserting a new chapter into a specific position in a book's table of contents. Printing the List (System.out.println(list)):
* Usage: To display the contents of the list. Real-time Use Case: Displaying a list of items, such as a list of available products to a user, or printing a list of registered participants for an event. Adding All Elements from Another List (addAll()):
* Usage: To add all elements from one list into another. Real-time Use Case: Merging two datasets, such as combining two lists of customers from different regions into a single list for a unified analysis. Finding the Size of the List (size() method):
* Usage: To get the number of elements in the list. Real-time Use Case: Checking the number of entries in a database, like the number of students enrolled in a course or the number of items in stock. Accessing Elements (get(index)):
* Usage: To retrieve a specific element from the list based on its index. Real-time Use Case: Fetching a specific data entry, such as retrieving a specific order detail from a list of orders. Removing Elements (remove(index) and removeAll()):
* Usage: remove(index) removes an element at a specific index, while removeAll() removes all elements that are present in another collection. Real-time Use Case: remove(index) can be used for deleting a specific entry, like removing a discontinued product from a product list. removeAll() can be useful in filtering out data, like removing all outdated items from a current inventory list. Clearing the List (clear()):
* Usage: To remove all elements from the list, making it empty. Real-time Use Case: Resetting data, such as clearing a user's shopping cart after they have completed the checkout process.



SET:

index value change so we cannot use get()

Collection: Set Definition: The Set interface in Java is a part of the Java Collections Framework. It represents a collection that cannot contain duplicate elements. Properties of Set: No Duplicate Elements: Ensures that each element in the Set is unique. Unordered Collection: Except for some specific implementations like LinkedHashSet or TreeSet, the Set does not guarantee the order of its elements. Implementation Classes: HashSet: Maintains a random order LinkedHashSet: Maintains insertion order of elements. TreeSet: Ascii value Maintains sorted order

collections.sort()=> sameFunction in SET we can get from TreeSET Why There is No get() in Set: The Set interface does not have a get() method, and this is by design, due to the following reasons:

Uniqueness Over Indexing: The Set is designed to ensure uniqueness rather than maintain an index-based system like List. Elements in a Set are not accessed by an index. Undefined Ordering: In most implementations of Set, the order of elements is not fixed. Therefore, retrieving an element by a specific index or position does not make sense.

list => input :[2,4,12,4,56,43,14,22,45] output: [2,4,12,4,56,43,14,22,45]

get(4) ->56

Set =>input :[2,4,12,4,56,43,14,22,45] LinkedHashSet : output:[2,4,12,56,43,14,22,45] get(4)->43

HashSet Output:[4,2,56,14,22,12,45,43] get(4) -> 22

TreeSet ouput:[2,4,12,14,22,43,45,56] get(4) ->22